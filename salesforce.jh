application {
  config {
    baseName SalesForce,
    serverPort 8080,
    applicationType monolith,
    packageName com.ril.digital.salesforce,
    authenticationType jwt,
    prodDatabaseType postgresql,
    enableSwaggerCodegen true,
    clientFramework react,
    clientPackageManager npm,
    buildTool maven,
    languages [en]
  }
  entities *
  dto * with mapstruct
  paginate * with infinite-scroll
  service all with serviceImpl
}

entity SalesForceUser {
    name String required,
    email String pattern(/^[^@\s]+@ril\.[^@\s]+$/) required,
    phone Long min(1000000000) max(9999999999) required,
    userRole Role,
    dateOfJoining LocalDate,
    dateOfExit LocalDate,
    isActive Boolean,
    createdAt LocalDate,
    updatedAt LocalDate,
    createdBy String,
    updatedBy String
}

enum Role {
    SuperAdmin,
    HRAdmin,
    SalesAdmin,
    RegionalHead,
    StateHead,
    AOL,
    JMDL,
    JMDO,
    Other
}

relationship OneToMany {
    SalesForceUser{subordinates} to SalesForceUser{manager}
}

entity SalesTarget {
    type SalesTargetType,
    startDate LocalDate required,
    endDate LocalDate required,
    targetValue Float required,
    isActive Boolean,
    createdAt LocalDate,
    updatedAt LocalDate,
    createdBy String,
    updatedBy String
}

enum SalesTargetType {
	Revenue,
    OrderCount,
    WoD
}

enum Category {
	CD,
    IT,
    SDA,
    Audio,
    Storage,
    Mobile,
    Other,
    All
}

relationship OneToMany {
    SalesForceUser{approvedSalesTargets} to SalesTarget{approvedBy}
}

entity SalesTargetFilter {
	articleId String,
    category Category,
    brand String,
    model String,
    articleMinPrice Float,
    articleMaxPrice Float,
    perOrderArticleMinQty Long,
    perOrderArticleMaxQty Long,
    perRetailerArticleMinQty Long,
    perRetailerArticleMaxQty Long,
    perRetailerDailyArticleMinQty Long,
    perRetailerDailyArticleMaxQty Long,
    state String,
    join FilterJoinType,
    isActive Boolean,
    createdAt LocalDate,
    updatedAt LocalDate,
    createdBy String,
    updatedBy String
}

enum FilterJoinType {
	AND,
    OR
}

relationship OneToMany {
    SalesTarget{filters} to SalesTargetFilter{target}
}

entity IncentiveScheme {
    type IncentiveSchemeType,
    minAchivementPercent Float,
    maxAchivementPercent Float,
    schemeValue Float,
    isActive Boolean,
    createdAt LocalDate,
    updatedAt LocalDate,
    createdBy String,
    updatedBy String
}

enum IncentiveSchemeType {
    Percent,
    Absolute
}

relationship OneToMany {
    SalesTarget{incentiveSchemes} to IncentiveScheme{target}
}

relationship OneToMany {
    SalesForceUser{approvedIncentiveSchemes} to IncentiveScheme{approvedBy}
}

entity RetailerMapping {
	name String,
    prmId String,
    agentCode String,
    pincode Long,
    state String,
    registedOn LocalDate,
    mappedOn LocalDate,
    mappedTill LocalDate,
    isActive Boolean,
    createdAt LocalDate,
    updatedAt LocalDate,
    createdBy String,
    updatedBy String
}

relationship OneToMany {
    SalesForceUser{retailerMappings} to RetailerMapping{relationshipManager}
}

relationship OneToMany {
    SalesForceUser{approvedRetailerMappings} to RetailerMapping{approvedBy}
}

entity OrderCache {
    orderId String,
    orderStatus OrderStatus,
    orderDate LocalDate,
    articleId String,
    category Category,
    brand String,
    model String,
    articlePrice Float,
    articleQty Long,
    retailerId String,
    retailerState String,
    isActive Boolean,
    createdAt LocalDate,
    updatedAt LocalDate,
    createdBy String,
    updatedBy String
}

enum OrderStatus {
	Open,
    Cancelled,
    Invoiced,
    InTransit,
    Delivered,
    FR,
    Returned
}

entity AchivementCache {
    startDate LocalDate,
    endDate LocalDate,
    articleId String,
    category Category,
    brand String,
    model String,
    retailerId String,
    retailerState String,
    orderQty Long,
    totalOrderValue Float,
    isActive Boolean,
    createdAt LocalDate,
    updatedAt LocalDate,
    createdBy String,
    updatedBy String
}

relationship OneToMany {
    SalesForceUser{achivementCaches} to AchivementCache{salesAgent}
}

entity Incentive {
    achivementPercent Float,
    incentiveValue Float,
    isActive Boolean,
    createdAt LocalDate,
    updatedAt LocalDate,
    createdBy String,
    updatedBy String
}

relationship OneToMany {
    IncentiveScheme{incentives} to Incentive{scheme},
    SalesForceUser{incentives} to Incentive{salesAgent}
}

relationship OneToMany {
    SalesForceUser{approvedIncentives} to Incentive{approvedBy}
}